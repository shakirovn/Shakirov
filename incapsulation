1.
class Person:
    def __init__(self, name, age, surname):
        self.__name = name
        self.__age = age
        self.__surname = surname

    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age

    def get_surname(self):
        return self.__surname

    def set_age(self, new_age):
        self.__age = new_age


person = Person("Jack", 23, "Jordan")
print("Name:", person.get_name())
print("Age:", person.get_age())
print("Surname:", person.get_surname())

person.set_age(28)
print("New age: ", person.get_age())

2.
from abc import ABC, abstractmethod


class Cloth(ABC):
    reserved = 0

    def __init__(self, name):
        self._name = name

    @abstractmethod
    def consumption(self):
        pass

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value


class Coat(Cloth):
    def __init__(self, name, size):
        super().__init__(name)
        self._size = size

    def consumption(self):
        return self._size / 6.5 + 0.5

    @property
    def size(self):
        return self._size

    @size.setter
    def size(self, value):
        self._size = value


class Suit(Cloth):
    def __init__(self, name, height):
        super().__init__(name)
        self._height = height

    def consumption(self):
        return 2 * self._height + 0.3

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self, value):
        self._height = value


coat1 = Coat("Пальто 1", 30)
coat2 = Coat("Пальто 2", 80)
suit1 = Suit("Костюм 1", 120)
suit2 = Suit("Костюм 2", 155)

total_fabric_consumption = 0
clothes = [coat1, coat2, suit1, suit2]

for cloth in clothes:
    consumption = cloth.consumption()
    total_fabric_consumption += consumption
    print(f"Для {cloth.name} расход ткани: {consumption}")

print(f"Общий расход ткани: {total_fabric_consumption}")

3.
class Box:
    def __init__(self, postcode, name, from_city, target_city):
        self.__postcode = postcode
        self.__name = name
        self.__from_city = from_city
        self.__target_city = target_city

    def postcode(self):
        return self.__postcode

    def name(self):
        return self.__name

    def from_city(self):
        return self.__from_city

    def target_city(self):
        return self.__target_city

    def set_target_city(self, new_target_city):
        self.__target_city = new_target_city


box = Box("420000", "Jack Jordan", "City A", "City B")
print(box.postcode())
print(box.name())
print(box.from_city())
print(box.target_city())

box.set_target_city("City C")
print(box.target_city())

4. 
import sys

sys.path.append('C:\\Users\\Нияз\\PycharmProjects\\pythonProject1')

from task_3_box import Box

box1 = Box("420123", "Rosa Silvia", "City A", "City B")
print(end='\n')
box2 = Box("420321", "Dwayne Johnson", "City C", "City D")
print(box1.postcode())
print(box1.name())
print(box1.from_city())
print(box1.target_city())
print(end='\n')
print(box2.postcode())
print(box2.name())
print(box2.from_city())
print(box2.target_city())

print(end='\n')


class Truck:
    def __init__(self, capacity):
        self.capacity = capacity

    def __str__(self):
        return f"Truck capacity: {len(self.capacity)} boxes."

    def __add__(self, box):
        self.capacity.append(box)
        return self

    def __sub__(self, box):
        self.capacity.remove(box)
        return self


truck = Truck([])
print(truck)

truck += box1
truck += box2
print(truck)

truck -= box1
print(truck)
